interface EffectOptions {
    deps?: (string | StateGetter<any>)[];
    immediate?: boolean;
    detectDeps?: boolean;
}
type StateValue<T> = T extends undefined ? T | undefined : T;
type StateSetter<T> = (value: T | ((prev: T) => T)) => void;
type StateGetter<T> = (() => T) & {
    value: T;
    __pphp_key?: string;
    __pphp_fullKey?: string;
    __pphp_component?: string;
};
declare global {
    interface Window {
        [key: string]: any;
    }
}
export declare class PPHP {
    private stateManager;
    private expressionEvaluator;
    private componentManager;
    private domBindingManager;
    private initialized;
    constructor();
    private initialize;
    state<T>(keyOrInitialValue: string | T, initialValue?: T): [StateGetter<StateValue<T>>, StateSetter<StateValue<T>>];
    private currentLoopContext;
    private getLoopExecutionContext;
    private generateLoopInstanceId;
    private looksLikeVariableName;
    effect(callback: () => void | (() => void), depsOrOptions?: (string | StateGetter<any>)[] | EffectOptions): () => void;
    private extractDependencyNames;
    private resolveDependencies;
    private createComponentScopedGlobals;
    fetchFunction<T = any>(functionName: string, data?: Record<string, any>, abortPrevious?: boolean): Promise<T | string>;
}
declare const pp: PPHP;
export { pp };
